{"version":3,"sources":["../../src/pages/speaker/speaker.module.ts","../../src/pages/speaker/speaker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACR;AAUxC;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAR7B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,6DAAW;aACZ;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,6DAAW,CAAC;aACtC;SACF,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACZoB;AACO;AAEhB;AAEgB;AACZ;AAE7C;;;;;GAKG;AAOH;IAKE,qBAAmB,OAAsB,EAAS,SAAoB,EAAU,OAAgB;QAA7E,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAU,YAAO,GAAP,OAAO,CAAS;QAFzF,oBAAe,GAAmB,EAAE,CAAC;QAG1C,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED,8BAAQ,GAAR;QAAA,iBAkBC;QAjBC,2DAA2D;QAC3D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,4DAAkB,CAAC,CAAC,IAAI,CAAC,wBAAc;YACtD,IAAI,eAAe,GAAmB,EAAE,CAAC;YAEzC,OAAO,CAAC,GAAG,CAAC,oBAAkB,KAAI,CAAC,OAAO,CAAC,EAAI,CAAC,CAAC;YACjD,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,cAAc,CAAC,OAAO,CAAC,iBAAO;gBAC5B,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7D,OAAO,CAAC,GAAG,CAAC,aAAW,KAAI,CAAC,OAAO,CAAC,EAAE,mCAA8B,OAAO,CAAC,QAAQ,UAAK,KAAO,CAAC,CAAC;gBAClG,OAAO,CAAC,GAAG,CAAC,sBAAoB,KAAI,CAAC,OAAO,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,8BAAyB,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,WAAW,CAAC,IAAI,EAAnB,CAAmB,CAAG,CAAC,CAAC;gBAC5I,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,OAAO,CAAC,GAAG,CAAC,oBAAkB,OAAO,CAAC,EAAE,wBAAqB,CAAC,CAAC;oBAC/D,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAChC,CAAC;YACH,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8EAA8E;IAC9E,iCAAiC;IACjC,4CAAsB,GAAtB,UAAuB,OAAe;QACpC,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,8EAAc,EAAE,EAAE,SAAS,EAAG,OAAO,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,oCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAC5C,CAAC;IAtCU,WAAW;QAJvB,wEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;WACG;SAC5B,CAAC;oBAMgG;OALrF,WAAW,CAuCvB;IAAD,CAAC;AAAA;SAvCY,WAAW,e","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SpeakerPage } from './speaker';\n\n@NgModule({\n  declarations: [\n    SpeakerPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SpeakerPage),\n  ],\n})\nexport class SpeakerPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/speaker/speaker.module.ts","import { Component, OnInit } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { Speaker } from '../../speaker';\nimport { Storage } from '@ionic/storage';\nimport { Session } from '../../session';\nimport { ConferencePage } from '../conference/conference'\nimport * as Constants from '../../constants';\n\n/**\n * Generated class for the SpeakerPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-speaker',\n  templateUrl: 'speaker.html',\n})\nexport class SpeakerPage implements OnInit {\n\n  public speaker: Speaker;\n  public speakerSessions: Array<Session> = [];\n\n  constructor(public navCtrl: NavController, public navParams: NavParams, private storage: Storage) {\n    this.speaker = navParams.get('speaker');\n  }\n\n  ngOnInit() {\n    // TODO: extract this piece of code in a method and call it\n    this.storage.get(Constants.SESSIONS).then(sessionsStored => {\n      let speakerSessions: Array<Session> = [];\n  \n      console.log(`speaker has id ${this.speaker.id}`);\n      console.log('Getting sessionsâ€¦');\n      sessionsStored.forEach(session => {\n        const found = session.speakers.indexOf(this.speaker.id) > -1;\n        console.log(`speaker ${this.speaker.id} found in current session: ${session.speakers}? ${found}`);\n        console.log(`speaker id type: ${this.speaker.id.constructor.name} ; speakers id types: ${session.speakers.map(id => id.constructor.name)}`);\n        if (found) {\n          console.log(`adding session ${session.id} to speakerSessions`);\n          speakerSessions.push(session);\n        }\n      });\n      this.speakerSessions = speakerSessions;\n    });\n  }\n\n  // TODO: same as ConferencePage.openSessionDescription, extract it and make it\n  //       available to every class\n  openSessionDescription(session:Session) {\n    console.log(\"Opening session description from speaker's details page\");\n    this.navCtrl.push(ConferencePage, { 'session' : session });\n  }\n  \n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SpeakerPage');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/speaker/speaker.ts"],"sourceRoot":""}